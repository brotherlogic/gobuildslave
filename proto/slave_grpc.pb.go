// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildSlaveClient is the client API for BuildSlave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildSlaveClient interface {
	RunJob(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	UpdateJob(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	KillJob(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error)
	ListJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	SlaveConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type buildSlaveClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildSlaveClient(cc grpc.ClientConnInterface) BuildSlaveClient {
	return &buildSlaveClient{cc}
}

func (c *buildSlaveClient) RunJob(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/gobuildslave.BuildSlave/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) UpdateJob(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/gobuildslave.BuildSlave/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) KillJob(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error) {
	out := new(KillResponse)
	err := c.cc.Invoke(ctx, "/gobuildslave.BuildSlave/KillJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) ListJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/gobuildslave.BuildSlave/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) SlaveConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/gobuildslave.BuildSlave/SlaveConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildSlaveServer is the server API for BuildSlave service.
// All implementations should embed UnimplementedBuildSlaveServer
// for forward compatibility
type BuildSlaveServer interface {
	RunJob(context.Context, *RunRequest) (*RunResponse, error)
	UpdateJob(context.Context, *UpdateRequest) (*UpdateResponse, error)
	KillJob(context.Context, *KillRequest) (*KillResponse, error)
	ListJobs(context.Context, *ListRequest) (*ListResponse, error)
	SlaveConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedBuildSlaveServer should be embedded to have forward compatible implementations.
type UnimplementedBuildSlaveServer struct {
}

func (UnimplementedBuildSlaveServer) RunJob(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedBuildSlaveServer) UpdateJob(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedBuildSlaveServer) KillJob(context.Context, *KillRequest) (*KillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}
func (UnimplementedBuildSlaveServer) ListJobs(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedBuildSlaveServer) SlaveConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlaveConfig not implemented")
}

// UnsafeBuildSlaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildSlaveServer will
// result in compilation errors.
type UnsafeBuildSlaveServer interface {
	mustEmbedUnimplementedBuildSlaveServer()
}

func RegisterBuildSlaveServer(s grpc.ServiceRegistrar, srv BuildSlaveServer) {
	s.RegisterService(&BuildSlave_ServiceDesc, srv)
}

func _BuildSlave_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).RunJob(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).UpdateJob(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).KillJob(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).ListJobs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_SlaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).SlaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/SlaveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).SlaveConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildSlave_ServiceDesc is the grpc.ServiceDesc for BuildSlave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildSlave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildslave.BuildSlave",
	HandlerType: (*BuildSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunJob",
			Handler:    _BuildSlave_RunJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _BuildSlave_UpdateJob_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _BuildSlave_KillJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _BuildSlave_ListJobs_Handler,
		},
		{
			MethodName: "SlaveConfig",
			Handler:    _BuildSlave_SlaveConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}

// GoBuildSlaveClient is the client API for GoBuildSlave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoBuildSlaveClient interface {
	Update(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Kill(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error)
}

type goBuildSlaveClient struct {
	cc grpc.ClientConnInterface
}

func NewGoBuildSlaveClient(cc grpc.ClientConnInterface) GoBuildSlaveClient {
	return &goBuildSlaveClient{cc}
}

func (c *goBuildSlaveClient) Update(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gobuildslave.GoBuildSlave/BuildJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Kill(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/gobuildslave.GoBuildSlave/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/gobuildslave.GoBuildSlave/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoBuildSlaveServer is the server API for GoBuildSlave service.
// All implementations should embed UnimplementedGoBuildSlaveServer
// for forward compatibility
type GoBuildSlaveServer interface {
	Update(context.Context, *JobSpec) (*Empty, error)
	BuildJob(context.Context, *JobSpec) (*Empty, error)
	Run(context.Context, *JobSpec) (*Empty, error)
	Kill(context.Context, *JobSpec) (*Empty, error)
	List(context.Context, *Empty) (*JobList, error)
	GetConfig(context.Context, *Empty) (*Config, error)
}

// UnimplementedGoBuildSlaveServer should be embedded to have forward compatible implementations.
type UnimplementedGoBuildSlaveServer struct {
}

func (UnimplementedGoBuildSlaveServer) Update(context.Context, *JobSpec) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGoBuildSlaveServer) BuildJob(context.Context, *JobSpec) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildJob not implemented")
}
func (UnimplementedGoBuildSlaveServer) Run(context.Context, *JobSpec) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedGoBuildSlaveServer) Kill(context.Context, *JobSpec) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedGoBuildSlaveServer) List(context.Context, *Empty) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGoBuildSlaveServer) GetConfig(context.Context, *Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}

// UnsafeGoBuildSlaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoBuildSlaveServer will
// result in compilation errors.
type UnsafeGoBuildSlaveServer interface {
	mustEmbedUnimplementedGoBuildSlaveServer()
}

func RegisterGoBuildSlaveServer(s grpc.ServiceRegistrar, srv GoBuildSlaveServer) {
	s.RegisterService(&GoBuildSlave_ServiceDesc, srv)
}

func _GoBuildSlave_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Update(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_BuildJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/BuildJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Run(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Kill(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GoBuildSlave_ServiceDesc is the grpc.ServiceDesc for GoBuildSlave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoBuildSlave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildslave.GoBuildSlave",
	HandlerType: (*GoBuildSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _GoBuildSlave_Update_Handler,
		},
		{
			MethodName: "BuildJob",
			Handler:    _GoBuildSlave_BuildJob_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GoBuildSlave_Run_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _GoBuildSlave_Kill_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GoBuildSlave_List_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _GoBuildSlave_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}
