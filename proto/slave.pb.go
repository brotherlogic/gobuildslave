// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slave.proto

/*
Package gobuildslave is a generated protocol buffer package.

It is generated from these files:
	slave.proto

It has these top-level messages:
	Empty
	JobSpec
	JobDetails
	JobList
	Config
*/
package gobuildslave

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JobDetails_State int32

const (
	JobDetails_ACKNOWLEDGED    JobDetails_State = 0
	JobDetails_BUILDING        JobDetails_State = 1
	JobDetails_BUILT           JobDetails_State = 2
	JobDetails_RUNNING         JobDetails_State = 3
	JobDetails_UPDATE_STARTING JobDetails_State = 4
	JobDetails_UPDATING        JobDetails_State = 5
	JobDetails_KILLING         JobDetails_State = 6
	JobDetails_DEAD            JobDetails_State = 7
	JobDetails_PENDING         JobDetails_State = 8
)

var JobDetails_State_name = map[int32]string{
	0: "ACKNOWLEDGED",
	1: "BUILDING",
	2: "BUILT",
	3: "RUNNING",
	4: "UPDATE_STARTING",
	5: "UPDATING",
	6: "KILLING",
	7: "DEAD",
	8: "PENDING",
}
var JobDetails_State_value = map[string]int32{
	"ACKNOWLEDGED":    0,
	"BUILDING":        1,
	"BUILT":           2,
	"RUNNING":         3,
	"UPDATE_STARTING": 4,
	"UPDATING":        5,
	"KILLING":         6,
	"DEAD":            7,
	"PENDING":         8,
}

func (x JobDetails_State) String() string {
	return proto.EnumName(JobDetails_State_name, int32(x))
}
func (JobDetails_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobSpec struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Server   string   `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Disk     int64    `protobuf:"varint,3,opt,name=disk" json:"disk,omitempty"`
	Args     []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	External bool     `protobuf:"varint,5,opt,name=external" json:"external,omitempty"`
	Host     string   `protobuf:"bytes,6,opt,name=host" json:"host,omitempty"`
	Port     int32    `protobuf:"varint,7,opt,name=port" json:"port,omitempty"`
}

func (m *JobSpec) Reset()                    { *m = JobSpec{} }
func (m *JobSpec) String() string            { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()               {}
func (*JobSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSpec) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *JobSpec) GetDisk() int64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *JobSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *JobSpec) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

func (m *JobSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *JobSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type JobDetails struct {
	Spec      *JobSpec         `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	State     JobDetails_State `protobuf:"varint,2,opt,name=state,enum=gobuildslave.JobDetails_State" json:"state,omitempty"`
	StartTime int64            `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TestCount int32            `protobuf:"varint,4,opt,name=test_count,json=testCount" json:"test_count,omitempty"`
}

func (m *JobDetails) Reset()                    { *m = JobDetails{} }
func (m *JobDetails) String() string            { return proto.CompactTextString(m) }
func (*JobDetails) ProtoMessage()               {}
func (*JobDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobDetails) GetSpec() *JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *JobDetails) GetState() JobDetails_State {
	if m != nil {
		return m.State
	}
	return JobDetails_ACKNOWLEDGED
}

func (m *JobDetails) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *JobDetails) GetTestCount() int32 {
	if m != nil {
		return m.TestCount
	}
	return 0
}

type JobList struct {
	Details []*JobDetails `protobuf:"bytes,1,rep,name=details" json:"details,omitempty"`
}

func (m *JobList) Reset()                    { *m = JobList{} }
func (m *JobList) String() string            { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()               {}
func (*JobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobList) GetDetails() []*JobDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type Config struct {
	Memory      int64  `protobuf:"varint,1,opt,name=memory" json:"memory,omitempty"`
	Disk        int64  `protobuf:"varint,2,opt,name=disk" json:"disk,omitempty"`
	External    bool   `protobuf:"varint,3,opt,name=external" json:"external,omitempty"`
	GoVersion   string `protobuf:"bytes,4,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	SupportsCds bool   `protobuf:"varint,5,opt,name=supports_cds,json=supportsCds" json:"supports_cds,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Config) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Config) GetDisk() int64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *Config) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

func (m *Config) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *Config) GetSupportsCds() bool {
	if m != nil {
		return m.SupportsCds
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "gobuildslave.Empty")
	proto.RegisterType((*JobSpec)(nil), "gobuildslave.JobSpec")
	proto.RegisterType((*JobDetails)(nil), "gobuildslave.JobDetails")
	proto.RegisterType((*JobList)(nil), "gobuildslave.JobList")
	proto.RegisterType((*Config)(nil), "gobuildslave.Config")
	proto.RegisterEnum("gobuildslave.JobDetails_State", JobDetails_State_name, JobDetails_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoBuildSlave service

type GoBuildSlaveClient interface {
	Update(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Kill(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error)
}

type goBuildSlaveClient struct {
	cc *grpc.ClientConn
}

func NewGoBuildSlaveClient(cc *grpc.ClientConn) GoBuildSlaveClient {
	return &goBuildSlaveClient{cc}
}

func (c *goBuildSlaveClient) Update(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/BuildJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Kill(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoBuildSlave service

type GoBuildSlaveServer interface {
	Update(context.Context, *JobSpec) (*Empty, error)
	BuildJob(context.Context, *JobSpec) (*Empty, error)
	Run(context.Context, *JobSpec) (*Empty, error)
	Kill(context.Context, *JobSpec) (*Empty, error)
	List(context.Context, *Empty) (*JobList, error)
	GetConfig(context.Context, *Empty) (*Config, error)
}

func RegisterGoBuildSlaveServer(s *grpc.Server, srv GoBuildSlaveServer) {
	s.RegisterService(&_GoBuildSlave_serviceDesc, srv)
}

func _GoBuildSlave_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Update(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_BuildJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/BuildJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Run(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Kill(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoBuildSlave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildslave.GoBuildSlave",
	HandlerType: (*GoBuildSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _GoBuildSlave_Update_Handler,
		},
		{
			MethodName: "BuildJob",
			Handler:    _GoBuildSlave_BuildJob_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GoBuildSlave_Run_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _GoBuildSlave_Kill_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GoBuildSlave_List_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _GoBuildSlave_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}

func init() { proto.RegisterFile("slave.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xeb, 0xf8, 0x7b, 0x12, 0x41, 0xb4, 0x05, 0x64, 0x55, 0x2a, 0x32, 0x3e, 0x85, 0x4b,
	0x0e, 0x69, 0x85, 0xb8, 0x70, 0x48, 0x63, 0x2b, 0x6a, 0x1b, 0x85, 0x6a, 0x93, 0xc0, 0x31, 0x72,
	0xe2, 0x25, 0x58, 0xd8, 0x5e, 0xcb, 0xbb, 0xa9, 0xe8, 0x0b, 0xf0, 0x00, 0xbc, 0x01, 0xef, 0xc0,
	0xdb, 0xf0, 0x32, 0x68, 0xd6, 0x6e, 0x95, 0xd2, 0x70, 0xc8, 0x6d, 0xe6, 0xb7, 0xff, 0x19, 0xcf,
	0x97, 0x0c, 0x6d, 0x91, 0xc5, 0xb7, 0xac, 0x5f, 0x56, 0x5c, 0x72, 0xd2, 0xd9, 0xf0, 0xd5, 0x36,
	0xcd, 0x12, 0xc5, 0x02, 0x1b, 0xcc, 0x28, 0x2f, 0xe5, 0x5d, 0xf0, 0x4b, 0x03, 0xfb, 0x8a, 0xaf,
	0x66, 0x25, 0x5b, 0x13, 0x02, 0x46, 0x11, 0xe7, 0xcc, 0xd3, 0x7c, 0xad, 0xe7, 0x52, 0x65, 0x93,
	0x57, 0x60, 0x09, 0x56, 0xdd, 0xb2, 0xca, 0x6b, 0x29, 0xda, 0x78, 0xa8, 0x4d, 0x52, 0xf1, 0xcd,
	0xd3, 0x7d, 0xad, 0xa7, 0x53, 0x65, 0x23, 0x8b, 0xab, 0x8d, 0xf0, 0x0c, 0x5f, 0xc7, 0x78, 0xb4,
	0xc9, 0x09, 0x38, 0xec, 0xbb, 0x64, 0x55, 0x11, 0x67, 0x9e, 0xe9, 0x6b, 0x3d, 0x87, 0x3e, 0xf8,
	0xa8, 0xff, 0xca, 0x85, 0xf4, 0xac, 0xfa, 0x7b, 0x68, 0x23, 0x2b, 0x79, 0x25, 0x3d, 0xdb, 0xd7,
	0x7a, 0x26, 0x55, 0x76, 0xf0, 0xbb, 0x05, 0x70, 0xc5, 0x57, 0x21, 0x93, 0x71, 0x9a, 0x09, 0xf2,
	0x16, 0x0c, 0x51, 0xb2, 0xb5, 0x2a, 0xb3, 0x3d, 0x78, 0xd9, 0xdf, 0x6d, 0xac, 0xdf, 0xf4, 0x42,
	0x95, 0x84, 0x9c, 0x83, 0x29, 0x64, 0x2c, 0x99, 0x2a, 0xfe, 0xd9, 0xe0, 0xf5, 0x13, 0x6d, 0x93,
	0xb3, 0x3f, 0x43, 0x15, 0xad, 0xc5, 0xe4, 0x14, 0x40, 0xc8, 0xb8, 0x92, 0x4b, 0x99, 0xe6, 0xac,
	0xe9, 0xd0, 0x55, 0x64, 0x9e, 0xe6, 0xea, 0x59, 0x32, 0x21, 0x97, 0x6b, 0xbe, 0x2d, 0xa4, 0x67,
	0xa8, 0x42, 0x5d, 0x24, 0x23, 0x04, 0xc1, 0x0f, 0x0d, 0x4c, 0x95, 0x8e, 0x74, 0xa1, 0x33, 0x1c,
	0x5d, 0x4f, 0x3f, 0x7e, 0x9e, 0x44, 0xe1, 0x38, 0x0a, 0xbb, 0x47, 0xa4, 0x03, 0xce, 0xc5, 0xe2,
	0x72, 0x12, 0x5e, 0x4e, 0xc7, 0x5d, 0x8d, 0xb8, 0x60, 0xa2, 0x37, 0xef, 0xb6, 0x48, 0x1b, 0x6c,
	0xba, 0x98, 0x4e, 0x91, 0xeb, 0xe4, 0x18, 0x9e, 0x2f, 0x6e, 0xc2, 0xe1, 0x3c, 0x5a, 0xce, 0xe6,
	0x43, 0x3a, 0x47, 0x68, 0x60, 0xa8, 0x82, 0xe8, 0x99, 0xa8, 0xbf, 0xbe, 0x9c, 0x4c, 0xd0, 0xb1,
	0x88, 0x03, 0x46, 0x18, 0x0d, 0xc3, 0xae, 0x8d, 0xf8, 0x26, 0x9a, 0xaa, 0xf4, 0x4e, 0xf0, 0x41,
	0x6d, 0x76, 0x92, 0x0a, 0x49, 0x06, 0x60, 0x27, 0x75, 0xa7, 0x9e, 0xe6, 0xeb, 0xbd, 0xf6, 0xc0,
	0xfb, 0xdf, 0x24, 0xe8, 0xbd, 0x30, 0xf8, 0xa9, 0x81, 0x35, 0xe2, 0xc5, 0x97, 0x74, 0x83, 0x47,
	0x90, 0xb3, 0x9c, 0x57, 0x77, 0x6a, 0xe6, 0x3a, 0x6d, 0xbc, 0x87, 0x23, 0x68, 0xed, 0x1c, 0xc1,
	0xee, 0xc2, 0xf5, 0x7f, 0x16, 0x7e, 0x0a, 0xb0, 0xe1, 0xcb, 0x5b, 0x56, 0x89, 0x94, 0x17, 0x6a,
	0x72, 0x2e, 0x75, 0x37, 0xfc, 0x53, 0x0d, 0xc8, 0x1b, 0xe8, 0x88, 0x6d, 0x89, 0x2b, 0x17, 0xcb,
	0x75, 0x22, 0x9a, 0x7b, 0x69, 0xdf, 0xb3, 0x51, 0x22, 0x06, 0x7f, 0x5a, 0xd0, 0x19, 0xf3, 0x0b,
	0xac, 0x7c, 0x86, 0x95, 0x93, 0x77, 0x60, 0x2d, 0xca, 0x04, 0xa7, 0xbd, 0xff, 0x10, 0x4e, 0x8e,
	0x1f, 0xe3, 0xfa, 0xea, 0x8f, 0xc8, 0x7b, 0x70, 0x54, 0x96, 0x2b, 0xbe, 0x3a, 0x30, 0xf2, 0x0c,
	0x74, 0xba, 0x2d, 0x0e, 0x0c, 0x3a, 0x07, 0xe3, 0x3a, 0xcd, 0xb2, 0xc3, 0xa3, 0xd4, 0xfa, 0xf6,
	0x3d, 0x9f, 0x3c, 0x4d, 0x85, 0x5a, 0xd5, 0x9a, 0x3b, 0x66, 0xb2, 0x59, 0xdd, 0xde, 0xd0, 0x17,
	0x8f, 0x61, 0x2d, 0x0d, 0x8e, 0x56, 0x96, 0xfa, 0x55, 0x9c, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x64, 0xe5, 0x3a, 0xbe, 0x39, 0x04, 0x00, 0x00,
}
