// Code generated by protoc-gen-go.
// source: slave.proto
// DO NOT EDIT!

/*
Package gobuildslave is a generated protocol buffer package.

It is generated from these files:
	slave.proto

It has these top-level messages:
	Empty
	JobSpec
	JobDetails
	JobList
*/
package gobuildslave

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobSpec struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *JobSpec) Reset()                    { *m = JobSpec{} }
func (m *JobSpec) String() string            { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()               {}
func (*JobSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type JobDetails struct {
	Spec *JobSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *JobDetails) Reset()                    { *m = JobDetails{} }
func (m *JobDetails) String() string            { return proto.CompactTextString(m) }
func (*JobDetails) ProtoMessage()               {}
func (*JobDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobDetails) GetSpec() *JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type JobList struct {
	Details []*JobDetails `protobuf:"bytes,1,rep,name=details" json:"details,omitempty"`
}

func (m *JobList) Reset()                    { *m = JobList{} }
func (m *JobList) String() string            { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()               {}
func (*JobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobList) GetDetails() []*JobDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "gobuildslave.Empty")
	proto.RegisterType((*JobSpec)(nil), "gobuildslave.JobSpec")
	proto.RegisterType((*JobDetails)(nil), "gobuildslave.JobDetails")
	proto.RegisterType((*JobList)(nil), "gobuildslave.JobList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoBuildSlave service

type GoBuildSlaveClient interface {
	BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error)
}

type goBuildSlaveClient struct {
	cc *grpc.ClientConn
}

func NewGoBuildSlaveClient(cc *grpc.ClientConn) GoBuildSlaveClient {
	return &goBuildSlaveClient{cc}
}

func (c *goBuildSlaveClient) BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/BuildJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoBuildSlave service

type GoBuildSlaveServer interface {
	BuildJob(context.Context, *JobSpec) (*Empty, error)
	Run(context.Context, *JobSpec) (*Empty, error)
	List(context.Context, *Empty) (*JobList, error)
}

func RegisterGoBuildSlaveServer(s *grpc.Server, srv GoBuildSlaveServer) {
	s.RegisterService(&_GoBuildSlave_serviceDesc, srv)
}

func _GoBuildSlave_BuildJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/BuildJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Run(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoBuildSlave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildslave.GoBuildSlave",
	HandlerType: (*GoBuildSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildJob",
			Handler:    _GoBuildSlave_BuildJob_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GoBuildSlave_Run_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GoBuildSlave_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}

func init() { proto.RegisterFile("slave.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0x49, 0x2c,
	0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0xcf, 0x4f, 0x2a, 0xcd, 0xcc, 0x49,
	0x01, 0x8b, 0x29, 0xb1, 0x73, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x2a, 0xc9, 0x72, 0xb1, 0x7b,
	0xe5, 0x27, 0x05, 0x17, 0xa4, 0x26, 0x0b, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0xe6, 0x5c, 0x5c, 0x40, 0x69, 0x97, 0xd4, 0x92,
	0xc4, 0xcc, 0x9c, 0x62, 0x21, 0x4d, 0x2e, 0x96, 0x62, 0xa0, 0x4a, 0xb0, 0x0a, 0x6e, 0x23, 0x51,
	0x3d, 0x64, 0x23, 0xf5, 0xa0, 0xc6, 0x04, 0x81, 0x95, 0x28, 0xd9, 0x82, 0xcd, 0xf5, 0xc9, 0x2c,
	0x2e, 0x11, 0x32, 0xe2, 0x62, 0x4f, 0x81, 0x18, 0x00, 0xd4, 0xc8, 0x0c, 0xd4, 0x28, 0x81, 0xa1,
	0x11, 0x6a, 0x41, 0x10, 0x4c, 0xa1, 0xd1, 0x66, 0x46, 0x2e, 0x1e, 0xf7, 0x7c, 0x27, 0x90, 0xa2,
	0x60, 0x90, 0x22, 0x21, 0x0b, 0x2e, 0x0e, 0x30, 0x0f, 0xa8, 0x58, 0x08, 0xbb, 0xc5, 0x52, 0xc2,
	0xa8, 0xc2, 0x10, 0xff, 0x31, 0x08, 0x19, 0x73, 0x31, 0x07, 0x95, 0xe6, 0x91, 0xa8, 0xc9, 0x84,
	0x8b, 0x05, 0xec, 0x76, 0x6c, 0xd2, 0x52, 0x98, 0x46, 0x81, 0xd4, 0x2a, 0x31, 0x24, 0xb1, 0x81,
	0x83, 0xda, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x06, 0x32, 0x9e, 0x79, 0x01, 0x00, 0x00,
}
