// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slave.proto

/*
Package gobuildslave is a generated protocol buffer package.

It is generated from these files:
	slave.proto

It has these top-level messages:
	Empty
	Requirement
	Job
	JobAssignment
	SlaveConfig
	JobSpec
	JobDetails
	JobList
	Config
	RunRequest
	RunResponse
	UpdateRequest
	UpdateResponse
	KillRequest
	KillResponse
	ListRequest
	ListResponse
	ConfigRequest
	ConfigResponse
*/
package gobuildslave

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequirementCategory int32

const (
	RequirementCategory_UNKNOWN  RequirementCategory = 0
	RequirementCategory_DISK     RequirementCategory = 1
	RequirementCategory_EXTERNAL RequirementCategory = 2
	RequirementCategory_SERVER   RequirementCategory = 3
)

var RequirementCategory_name = map[int32]string{
	0: "UNKNOWN",
	1: "DISK",
	2: "EXTERNAL",
	3: "SERVER",
}
var RequirementCategory_value = map[string]int32{
	"UNKNOWN":  0,
	"DISK":     1,
	"EXTERNAL": 2,
	"SERVER":   3,
}

func (x RequirementCategory) String() string {
	return proto.EnumName(RequirementCategory_name, int32(x))
}
func (RequirementCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type State int32

const (
	State_ACKNOWLEDGED    State = 0
	State_BUILDING        State = 1
	State_BUILT           State = 2
	State_RUNNING         State = 3
	State_UPDATE_STARTING State = 4
	State_UPDATING        State = 5
	State_KILLING         State = 6
	State_DEAD            State = 7
	State_PENDING         State = 8
	State_DIED            State = 9
)

var State_name = map[int32]string{
	0: "ACKNOWLEDGED",
	1: "BUILDING",
	2: "BUILT",
	3: "RUNNING",
	4: "UPDATE_STARTING",
	5: "UPDATING",
	6: "KILLING",
	7: "DEAD",
	8: "PENDING",
	9: "DIED",
}
var State_value = map[string]int32{
	"ACKNOWLEDGED":    0,
	"BUILDING":        1,
	"BUILT":           2,
	"RUNNING":         3,
	"UPDATE_STARTING": 4,
	"UPDATING":        5,
	"KILLING":         6,
	"DEAD":            7,
	"PENDING":         8,
	"DIED":            9,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Requirement struct {
	Category   RequirementCategory `protobuf:"varint,1,opt,name=category,enum=gobuildslave.RequirementCategory" json:"category,omitempty"`
	Properties string              `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
}

func (m *Requirement) Reset()                    { *m = Requirement{} }
func (m *Requirement) String() string            { return proto.CompactTextString(m) }
func (*Requirement) ProtoMessage()               {}
func (*Requirement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Requirement) GetCategory() RequirementCategory {
	if m != nil {
		return m.Category
	}
	return RequirementCategory_UNKNOWN
}

func (m *Requirement) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

type Job struct {
	Name         string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	GoPath       string         `protobuf:"bytes,2,opt,name=go_path,json=goPath" json:"go_path,omitempty"`
	Requirements []*Requirement `protobuf:"bytes,3,rep,name=requirements" json:"requirements,omitempty"`
	Sudo         bool           `protobuf:"varint,4,opt,name=sudo" json:"sudo,omitempty"`
	NonBootstrap bool           `protobuf:"varint,5,opt,name=non_bootstrap,json=nonBootstrap" json:"non_bootstrap,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetGoPath() string {
	if m != nil {
		return m.GoPath
	}
	return ""
}

func (m *Job) GetRequirements() []*Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *Job) GetSudo() bool {
	if m != nil {
		return m.Sudo
	}
	return false
}

func (m *Job) GetNonBootstrap() bool {
	if m != nil {
		return m.NonBootstrap
	}
	return false
}

type JobAssignment struct {
	Job        *Job   `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Server     string `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Host       string `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
	Port       int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	State      State  `protobuf:"varint,4,opt,name=state,enum=gobuildslave.State" json:"state,omitempty"`
	StartTime  int64  `protobuf:"varint,6,opt,name=startTime" json:"startTime,omitempty"`
	CommandKey string `protobuf:"bytes,7,opt,name=command_key,json=commandKey" json:"command_key,omitempty"`
	BuildFail  int32  `protobuf:"varint,8,opt,name=build_fail,json=buildFail" json:"build_fail,omitempty"`
}

func (m *JobAssignment) Reset()                    { *m = JobAssignment{} }
func (m *JobAssignment) String() string            { return proto.CompactTextString(m) }
func (*JobAssignment) ProtoMessage()               {}
func (*JobAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobAssignment) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *JobAssignment) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *JobAssignment) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *JobAssignment) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *JobAssignment) GetState() State {
	if m != nil {
		return m.State
	}
	return State_ACKNOWLEDGED
}

func (m *JobAssignment) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *JobAssignment) GetCommandKey() string {
	if m != nil {
		return m.CommandKey
	}
	return ""
}

func (m *JobAssignment) GetBuildFail() int32 {
	if m != nil {
		return m.BuildFail
	}
	return 0
}

type SlaveConfig struct {
	Requirements []*Requirement `protobuf:"bytes,1,rep,name=requirements" json:"requirements,omitempty"`
}

func (m *SlaveConfig) Reset()                    { *m = SlaveConfig{} }
func (m *SlaveConfig) String() string            { return proto.CompactTextString(m) }
func (*SlaveConfig) ProtoMessage()               {}
func (*SlaveConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SlaveConfig) GetRequirements() []*Requirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

type JobSpec struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Server   string   `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Disk     int64    `protobuf:"varint,3,opt,name=disk" json:"disk,omitempty"`
	Args     []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	External bool     `protobuf:"varint,5,opt,name=external" json:"external,omitempty"`
	Host     string   `protobuf:"bytes,6,opt,name=host" json:"host,omitempty"`
	Port     int32    `protobuf:"varint,7,opt,name=port" json:"port,omitempty"`
	Cds      bool     `protobuf:"varint,8,opt,name=cds" json:"cds,omitempty"`
}

func (m *JobSpec) Reset()                    { *m = JobSpec{} }
func (m *JobSpec) String() string            { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()               {}
func (*JobSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JobSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSpec) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *JobSpec) GetDisk() int64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *JobSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *JobSpec) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

func (m *JobSpec) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *JobSpec) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *JobSpec) GetCds() bool {
	if m != nil {
		return m.Cds
	}
	return false
}

type JobDetails struct {
	Spec      *JobSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	State     State    `protobuf:"varint,2,opt,name=state,enum=gobuildslave.State" json:"state,omitempty"`
	StartTime int64    `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TestCount int32    `protobuf:"varint,4,opt,name=test_count,json=testCount" json:"test_count,omitempty"`
}

func (m *JobDetails) Reset()                    { *m = JobDetails{} }
func (m *JobDetails) String() string            { return proto.CompactTextString(m) }
func (*JobDetails) ProtoMessage()               {}
func (*JobDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JobDetails) GetSpec() *JobSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *JobDetails) GetState() State {
	if m != nil {
		return m.State
	}
	return State_ACKNOWLEDGED
}

func (m *JobDetails) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *JobDetails) GetTestCount() int32 {
	if m != nil {
		return m.TestCount
	}
	return 0
}

type JobList struct {
	Details []*JobDetails `protobuf:"bytes,1,rep,name=details" json:"details,omitempty"`
}

func (m *JobList) Reset()                    { *m = JobList{} }
func (m *JobList) String() string            { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()               {}
func (*JobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *JobList) GetDetails() []*JobDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type Config struct {
	Memory      int64  `protobuf:"varint,1,opt,name=memory" json:"memory,omitempty"`
	Disk        int64  `protobuf:"varint,2,opt,name=disk" json:"disk,omitempty"`
	External    bool   `protobuf:"varint,3,opt,name=external" json:"external,omitempty"`
	GoVersion   string `protobuf:"bytes,4,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	SupportsCds bool   `protobuf:"varint,5,opt,name=supports_cds,json=supportsCds" json:"supports_cds,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Config) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Config) GetDisk() int64 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *Config) GetExternal() bool {
	if m != nil {
		return m.External
	}
	return false
}

func (m *Config) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *Config) GetSupportsCds() bool {
	if m != nil {
		return m.SupportsCds
	}
	return false
}

type RunRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (m *RunRequest) String() string            { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RunRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type RunResponse struct {
}

func (m *RunResponse) Reset()                    { *m = RunResponse{} }
func (m *RunResponse) String() string            { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()               {}
func (*RunResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type UpdateRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type KillRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
}

func (m *KillRequest) Reset()                    { *m = KillRequest{} }
func (m *KillRequest) String() string            { return proto.CompactTextString(m) }
func (*KillRequest) ProtoMessage()               {}
func (*KillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *KillRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type KillResponse struct {
}

func (m *KillResponse) Reset()                    { *m = KillResponse{} }
func (m *KillResponse) String() string            { return proto.CompactTextString(m) }
func (*KillResponse) ProtoMessage()               {}
func (*KillResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type ListResponse struct {
	Jobs []*JobAssignment `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ListResponse) GetJobs() []*JobAssignment {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type ConfigRequest struct {
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type ConfigResponse struct {
	Config *SlaveConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ConfigResponse) GetConfig() *SlaveConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "gobuildslave.Empty")
	proto.RegisterType((*Requirement)(nil), "gobuildslave.Requirement")
	proto.RegisterType((*Job)(nil), "gobuildslave.Job")
	proto.RegisterType((*JobAssignment)(nil), "gobuildslave.JobAssignment")
	proto.RegisterType((*SlaveConfig)(nil), "gobuildslave.SlaveConfig")
	proto.RegisterType((*JobSpec)(nil), "gobuildslave.JobSpec")
	proto.RegisterType((*JobDetails)(nil), "gobuildslave.JobDetails")
	proto.RegisterType((*JobList)(nil), "gobuildslave.JobList")
	proto.RegisterType((*Config)(nil), "gobuildslave.Config")
	proto.RegisterType((*RunRequest)(nil), "gobuildslave.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "gobuildslave.RunResponse")
	proto.RegisterType((*UpdateRequest)(nil), "gobuildslave.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "gobuildslave.UpdateResponse")
	proto.RegisterType((*KillRequest)(nil), "gobuildslave.KillRequest")
	proto.RegisterType((*KillResponse)(nil), "gobuildslave.KillResponse")
	proto.RegisterType((*ListRequest)(nil), "gobuildslave.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "gobuildslave.ListResponse")
	proto.RegisterType((*ConfigRequest)(nil), "gobuildslave.ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "gobuildslave.ConfigResponse")
	proto.RegisterEnum("gobuildslave.RequirementCategory", RequirementCategory_name, RequirementCategory_value)
	proto.RegisterEnum("gobuildslave.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BuildSlave service

type BuildSlaveClient interface {
	RunJob(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	UpdateJob(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	KillJob(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error)
	ListJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	SlaveConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type buildSlaveClient struct {
	cc *grpc.ClientConn
}

func NewBuildSlaveClient(cc *grpc.ClientConn) BuildSlaveClient {
	return &buildSlaveClient{cc}
}

func (c *buildSlaveClient) RunJob(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := grpc.Invoke(ctx, "/gobuildslave.BuildSlave/RunJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) UpdateJob(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/gobuildslave.BuildSlave/UpdateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) KillJob(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error) {
	out := new(KillResponse)
	err := grpc.Invoke(ctx, "/gobuildslave.BuildSlave/KillJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) ListJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/gobuildslave.BuildSlave/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSlaveClient) SlaveConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/gobuildslave.BuildSlave/SlaveConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuildSlave service

type BuildSlaveServer interface {
	RunJob(context.Context, *RunRequest) (*RunResponse, error)
	UpdateJob(context.Context, *UpdateRequest) (*UpdateResponse, error)
	KillJob(context.Context, *KillRequest) (*KillResponse, error)
	ListJobs(context.Context, *ListRequest) (*ListResponse, error)
	SlaveConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

func RegisterBuildSlaveServer(s *grpc.Server, srv BuildSlaveServer) {
	s.RegisterService(&_BuildSlave_serviceDesc, srv)
}

func _BuildSlave_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).RunJob(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).UpdateJob(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).KillJob(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).ListJobs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSlave_SlaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSlaveServer).SlaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.BuildSlave/SlaveConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSlaveServer).SlaveConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildSlave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildslave.BuildSlave",
	HandlerType: (*BuildSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunJob",
			Handler:    _BuildSlave_RunJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _BuildSlave_UpdateJob_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _BuildSlave_KillJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _BuildSlave_ListJobs_Handler,
		},
		{
			MethodName: "SlaveConfig",
			Handler:    _BuildSlave_SlaveConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}

// Client API for GoBuildSlave service

type GoBuildSlaveClient interface {
	Update(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	Kill(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error)
}

type goBuildSlaveClient struct {
	cc *grpc.ClientConn
}

func NewGoBuildSlaveClient(cc *grpc.ClientConn) GoBuildSlaveClient {
	return &goBuildSlaveClient{cc}
}

func (c *goBuildSlaveClient) Update(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) BuildJob(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/BuildJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Run(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) Kill(ctx context.Context, in *JobSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goBuildSlaveClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := grpc.Invoke(ctx, "/gobuildslave.GoBuildSlave/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoBuildSlave service

type GoBuildSlaveServer interface {
	Update(context.Context, *JobSpec) (*Empty, error)
	BuildJob(context.Context, *JobSpec) (*Empty, error)
	Run(context.Context, *JobSpec) (*Empty, error)
	Kill(context.Context, *JobSpec) (*Empty, error)
	List(context.Context, *Empty) (*JobList, error)
	GetConfig(context.Context, *Empty) (*Config, error)
}

func RegisterGoBuildSlaveServer(s *grpc.Server, srv GoBuildSlaveServer) {
	s.RegisterService(&_GoBuildSlave_serviceDesc, srv)
}

func _GoBuildSlave_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Update(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_BuildJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/BuildJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).BuildJob(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Run(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).Kill(ctx, req.(*JobSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoBuildSlave_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoBuildSlaveServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gobuildslave.GoBuildSlave/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoBuildSlaveServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoBuildSlave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gobuildslave.GoBuildSlave",
	HandlerType: (*GoBuildSlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _GoBuildSlave_Update_Handler,
		},
		{
			MethodName: "BuildJob",
			Handler:    _GoBuildSlave_BuildJob_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _GoBuildSlave_Run_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _GoBuildSlave_Kill_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GoBuildSlave_List_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _GoBuildSlave_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave.proto",
}

func init() { proto.RegisterFile("slave.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xd1, 0x72, 0xda, 0x46,
	0x14, 0x45, 0x08, 0x84, 0x74, 0x05, 0x8e, 0xba, 0x6e, 0x53, 0x85, 0xc6, 0x2d, 0x51, 0x5e, 0x48,
	0x1e, 0xdc, 0x09, 0xc9, 0x74, 0xfa, 0xe2, 0xc9, 0x60, 0x50, 0x5c, 0x63, 0x86, 0x7a, 0x16, 0x9c,
	0xf6, 0x8d, 0x91, 0x60, 0x83, 0x95, 0x80, 0x56, 0xd5, 0x2e, 0x9e, 0xfa, 0x2f, 0x3a, 0xfd, 0x82,
	0x3e, 0xf7, 0xb5, 0x9f, 0xd3, 0x5f, 0xe8, 0x2f, 0x74, 0xa6, 0xb3, 0x2b, 0x81, 0x85, 0xac, 0xb6,
	0xe1, 0x6d, 0xf7, 0xec, 0xbd, 0x67, 0xef, 0x3d, 0xe7, 0x6a, 0x01, 0x4c, 0xb6, 0xf4, 0x6e, 0xc8,
	0x71, 0x14, 0x53, 0x4e, 0x51, 0x7d, 0x41, 0xfd, 0x75, 0xb0, 0x9c, 0x4b, 0xcc, 0xa9, 0x41, 0xd5,
	0x5d, 0x45, 0xfc, 0xd6, 0x59, 0x82, 0x89, 0xc9, 0x4f, 0xeb, 0x20, 0x26, 0x2b, 0x12, 0x72, 0x74,
	0x02, 0xfa, 0xcc, 0xe3, 0x64, 0x41, 0xe3, 0x5b, 0x5b, 0x69, 0x29, 0xed, 0x83, 0xce, 0x93, 0xe3,
	0x6c, 0xe2, 0x71, 0x26, 0xb8, 0x97, 0x06, 0xe2, 0x6d, 0x0a, 0xfa, 0x12, 0x20, 0x8a, 0x69, 0x44,
	0x62, 0x1e, 0x10, 0x66, 0x97, 0x5b, 0x4a, 0xdb, 0xc0, 0x19, 0xc4, 0xf9, 0x5d, 0x01, 0x75, 0x40,
	0x7d, 0x84, 0xa0, 0x12, 0x7a, 0x2b, 0x22, 0xaf, 0x30, 0xb0, 0x5c, 0xa3, 0xcf, 0xa1, 0xb6, 0xa0,
	0xd3, 0xc8, 0xe3, 0xd7, 0x69, 0xa2, 0xb6, 0xa0, 0x97, 0x1e, 0xbf, 0x46, 0x27, 0x50, 0x8f, 0xef,
	0x6e, 0x65, 0xb6, 0xda, 0x52, 0xdb, 0x66, 0xe7, 0xd1, 0xbf, 0xd6, 0x85, 0x77, 0xc2, 0xc5, 0x5d,
	0x6c, 0x3d, 0xa7, 0x76, 0xa5, 0xa5, 0xb4, 0x75, 0x2c, 0xd7, 0xe8, 0x29, 0x34, 0x42, 0x1a, 0x4e,
	0x7d, 0x4a, 0x39, 0xe3, 0xb1, 0x17, 0xd9, 0x55, 0x79, 0x58, 0x0f, 0x69, 0x78, 0xba, 0xc1, 0x9c,
	0xbf, 0x15, 0x68, 0x0c, 0xa8, 0xdf, 0x65, 0x2c, 0x58, 0x84, 0x52, 0x9d, 0xa7, 0xa0, 0xbe, 0xa7,
	0xbe, 0xac, 0xda, 0xec, 0x7c, 0xb2, 0x5b, 0xc0, 0x80, 0xfa, 0x58, 0x9c, 0xa2, 0x87, 0xa0, 0x31,
	0x12, 0xdf, 0x90, 0x78, 0xd3, 0x46, 0xb2, 0x13, 0x75, 0x5c, 0x53, 0xc6, 0xe5, 0x55, 0x06, 0x96,
	0x6b, 0x81, 0x45, 0x34, 0xe6, 0xb6, 0xda, 0x52, 0xda, 0x55, 0x2c, 0xd7, 0xe8, 0x19, 0x54, 0x19,
	0xf7, 0x38, 0x91, 0x05, 0x1f, 0x74, 0x0e, 0x77, 0xaf, 0x19, 0x8b, 0x23, 0x9c, 0x44, 0xa0, 0xc7,
	0x60, 0x30, 0xee, 0xc5, 0x7c, 0x12, 0xac, 0x88, 0xad, 0xb5, 0x94, 0xb6, 0x8a, 0xef, 0x00, 0xf4,
	0x15, 0x98, 0x33, 0xba, 0x5a, 0x79, 0xe1, 0x7c, 0xfa, 0x81, 0xdc, 0xda, 0xb5, 0xc4, 0x8d, 0x14,
	0xba, 0x20, 0xb7, 0xe8, 0x08, 0x40, 0x32, 0x4f, 0xdf, 0x79, 0xc1, 0xd2, 0xd6, 0x65, 0x0d, 0x86,
	0x44, 0xde, 0x78, 0xc1, 0xd2, 0x19, 0x82, 0x39, 0x16, 0x77, 0xf6, 0x68, 0xf8, 0x2e, 0x58, 0xdc,
	0xb3, 0x41, 0xd9, 0xcb, 0x06, 0xe7, 0x0f, 0x05, 0x6a, 0x03, 0xea, 0x8f, 0x23, 0x32, 0x2b, 0xb4,
	0xff, 0x3f, 0x64, 0x9b, 0x07, 0xec, 0x83, 0x94, 0x48, 0xc5, 0x72, 0x2d, 0x30, 0x2f, 0x5e, 0x30,
	0xbb, 0xd2, 0x52, 0x45, 0xbe, 0x58, 0xa3, 0x26, 0xe8, 0xe4, 0x67, 0x4e, 0xe2, 0xd0, 0x5b, 0xa6,
	0x6e, 0x6e, 0xf7, 0x5b, 0xe9, 0xb5, 0x02, 0xe9, 0x6b, 0x19, 0xe9, 0x2d, 0x50, 0x67, 0x73, 0x26,
	0x95, 0xd0, 0xb1, 0x58, 0x3a, 0xbf, 0x29, 0x00, 0x03, 0xea, 0xf7, 0x09, 0xf7, 0x82, 0x25, 0x43,
	0xcf, 0xa0, 0xc2, 0x22, 0x32, 0x4b, 0x27, 0xe0, 0xb3, 0x7b, 0x13, 0x20, 0xba, 0xc3, 0x32, 0xe4,
	0xce, 0xc6, 0xf2, 0xff, 0xda, 0x78, 0x04, 0x20, 0x5d, 0x9b, 0x72, 0xe1, 0xa3, 0x9a, 0xf7, 0xf1,
	0x08, 0x80, 0x13, 0xc6, 0xa7, 0x33, 0xba, 0x0e, 0xb9, 0x9c, 0x8a, 0x2a, 0x36, 0x04, 0xd2, 0x13,
	0x80, 0x73, 0x22, 0x75, 0x1d, 0x06, 0x8c, 0xa3, 0x0e, 0xd4, 0xe6, 0x49, 0xa5, 0xa9, 0x3b, 0xf6,
	0xbd, 0x0a, 0xd3, 0x4e, 0xf0, 0x26, 0xd0, 0xf9, 0x55, 0x01, 0x2d, 0x75, 0xf8, 0x21, 0x68, 0x2b,
	0xb2, 0xda, 0x7c, 0xfa, 0x2a, 0x4e, 0x77, 0x5b, 0x0b, 0xca, 0x19, 0x0b, 0xb2, 0x72, 0xab, 0x39,
	0xb9, 0x8f, 0x00, 0x16, 0x74, 0x7a, 0x43, 0x62, 0x16, 0xd0, 0x50, 0x16, 0x6c, 0x60, 0x63, 0x41,
	0xdf, 0x26, 0x00, 0x7a, 0x02, 0x75, 0xb6, 0x8e, 0x84, 0xe0, 0x6c, 0x2a, 0xe4, 0x4e, 0xdc, 0x32,
	0x37, 0x58, 0x6f, 0xce, 0x9c, 0x17, 0x00, 0x78, 0x1d, 0x8a, 0x61, 0x22, 0xec, 0xe3, 0x3e, 0x3b,
	0xa7, 0x01, 0xa6, 0x4c, 0x61, 0x11, 0x0d, 0x19, 0x71, 0x5e, 0x41, 0xe3, 0x2a, 0x9a, 0x0b, 0x91,
	0xf7, 0x21, 0xb1, 0xe0, 0x60, 0x93, 0x95, 0xf2, 0x74, 0xc0, 0xbc, 0x08, 0x96, 0xcb, 0xbd, 0x58,
	0x0e, 0xa0, 0x9e, 0xe4, 0xa4, 0x1c, 0x0d, 0x30, 0x85, 0x3d, 0x29, 0x87, 0xf3, 0x1a, 0xea, 0xc9,
	0x36, 0x39, 0x46, 0x5f, 0x43, 0xe5, 0x3d, 0xf5, 0x37, 0x96, 0x7d, 0x71, 0x8f, 0xf4, 0xee, 0x01,
	0xc2, 0x32, 0xd0, 0x79, 0x00, 0x8d, 0xc4, 0xb1, 0x0d, 0x63, 0x0f, 0x0e, 0x36, 0x40, 0xca, 0xf9,
	0x02, 0xb4, 0x99, 0x44, 0xd2, 0x52, 0x73, 0x9f, 0x69, 0xe6, 0xbb, 0xc6, 0x69, 0xe0, 0xf3, 0x37,
	0x70, 0x58, 0xf0, 0xb8, 0x23, 0x13, 0x6a, 0x57, 0xa3, 0x8b, 0xd1, 0xf7, 0x3f, 0x8c, 0xac, 0x12,
	0xd2, 0xa1, 0xd2, 0x3f, 0x1f, 0x5f, 0x58, 0x0a, 0xaa, 0x83, 0xee, 0xfe, 0x38, 0x71, 0xf1, 0xa8,
	0x3b, 0xb4, 0xca, 0x08, 0x40, 0x1b, 0xbb, 0xf8, 0xad, 0x8b, 0x2d, 0xf5, 0xf9, 0x2f, 0x0a, 0x54,
	0xe5, 0x78, 0x23, 0x0b, 0xea, 0xdd, 0x9e, 0x48, 0x1d, 0xba, 0xfd, 0x33, 0xb7, 0x6f, 0x95, 0x44,
	0xd6, 0xe9, 0xd5, 0xf9, 0xb0, 0x7f, 0x3e, 0x3a, 0xb3, 0x14, 0x64, 0x40, 0x55, 0xec, 0x26, 0x56,
	0x59, 0xdc, 0x82, 0xaf, 0x46, 0x23, 0x81, 0xab, 0xe8, 0x10, 0x1e, 0x5c, 0x5d, 0xf6, 0xbb, 0x13,
	0x77, 0x3a, 0x9e, 0x74, 0xf1, 0x44, 0x80, 0x15, 0x91, 0x2a, 0x41, 0xb1, 0xab, 0x8a, 0xf8, 0x8b,
	0xf3, 0xe1, 0x50, 0x6c, 0x34, 0x59, 0x95, 0xdb, 0xed, 0x5b, 0x35, 0x01, 0x5f, 0xba, 0x23, 0x49,
	0xaf, 0x27, 0xc5, 0xba, 0x7d, 0xcb, 0xe8, 0xfc, 0x55, 0x06, 0x38, 0x15, 0xdd, 0xcb, 0xbe, 0xd1,
	0x6b, 0xd0, 0xf0, 0x3a, 0x14, 0xbf, 0x43, 0xb9, 0xef, 0xe3, 0x6e, 0xe6, 0x9a, 0x8f, 0x0a, 0x4e,
	0x52, 0x3b, 0x4b, 0xe8, 0x3b, 0x30, 0x92, 0x31, 0x11, 0x1c, 0x39, 0xc3, 0x76, 0xa6, 0xae, 0xf9,
	0xb8, 0xf8, 0x70, 0xcb, 0x74, 0x0a, 0x35, 0x31, 0x2a, 0x82, 0x27, 0x77, 0x63, 0x66, 0xea, 0x9a,
	0xcd, 0xa2, 0xa3, 0x2d, 0x47, 0x0f, 0x74, 0x31, 0x4f, 0x03, 0xea, 0xb3, 0x3c, 0x49, 0x66, 0xec,
	0xf2, 0x24, 0xd9, 0x11, 0x74, 0x4a, 0x68, 0xb0, 0xfb, 0xd8, 0xe7, 0x9a, 0xda, 0x19, 0xb7, 0x7c,
	0x53, 0xbb, 0xa3, 0xe7, 0x94, 0x3a, 0x7f, 0x96, 0xa1, 0x7e, 0x46, 0x33, 0x82, 0x7f, 0x03, 0x5a,
	0xd2, 0x39, 0x2a, 0x7e, 0x32, 0x9b, 0xb9, 0xd7, 0x31, 0xf9, 0x6b, 0x52, 0x42, 0xdf, 0x82, 0x2e,
	0x59, 0x84, 0x3c, 0xfb, 0x65, 0xbe, 0x04, 0x15, 0xaf, 0xc3, 0x3d, 0x93, 0x5e, 0x41, 0x45, 0x48,
	0xbb, 0x7f, 0x96, 0x7c, 0x7c, 0x8b, 0x8e, 0x9b, 0xf7, 0xa9, 0x44, 0xac, 0x6c, 0xcd, 0x38, 0x23,
	0x3c, 0x55, 0xbb, 0x30, 0xf5, 0xd3, 0x22, 0x95, 0x9d, 0x92, 0xaf, 0xc9, 0xff, 0x73, 0x2f, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x20, 0xda, 0x7f, 0xde, 0x09, 0x00, 0x00,
}
